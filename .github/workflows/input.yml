name: Pixiv Input
on:
  workflow_call:
    inputs:
      mode:
        description: '模式'
        required: true
        default: '下载特定收藏tag'
        type: string
      tag:
        description: '分类tag'
        required: false
        type: string
        default: 未分類
      uid:
        description: 'UID'
        required: false
        type: string
      Upload:
        description: '上传路径'
        required: true
        type: string
        default: Upload/Pixiv/image
      push:
        required: false
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      mode:
        description: '模式'
        required: true
        default: '下载特定收藏tag'
        type: choice
        options:
        - 下载特定收藏tag
        - 下载特定UID的作品
      tag:
        description: '分类tag'
        required: false
        type: string
        default: 未分類
      uid:
        description: 'UID'
        required: false
        type: number
      Upload:
        description: '上传路径'
        required: true
        type: string
        default: Upload/Pixiv/image
      push:
        description: '是否更新凭证'
        required: false
        type: boolean
        default: true
    
jobs:
  Pixiv-Main:
    runs-on: ubuntu-latest
    outputs:
      gif-check: ${{ steps.gif-check.outputs.GIF_CONTROL }}
        
    steps:                          
    - name: checkout main
      uses: actions/checkout@v2
      with:
        ref: main
        fetch-depth: full
               
    - name: Prepare
      run: |
        pip install pycryptodome
        sudo apt update
        sudo apt install -y -qq aria2
        python C.py --public "${{ secrets.PUBLIC }}" --private "${{ secrets.PRIVATE }}" --mode jiemi --type rclone
        
    - name: Download favorite Tag
      if: inputs.mode == '下载特定收藏tag'
      run: |
        python aria.py -uid ${{ secrets.UID }} -c ${{ secrets.COOKIE }} --tag ${{ inputs.tag }} --type rclone
        cd image
        bash ../retry.sh aria2c -c --input-file=urllist.txt --continue=true --conditional-get=true --allow-overwrite=false --auto-file-renaming=false  \
          --header='accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8' \
          --header='accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,ja;q=0.6,eo;q=0.5' \
          --header='cache-control: no-cache' \
          --header='dnt: 1' \
          --header='pragma: no-cache' \
          --header='priority: i' \
          --header='referer: https://www.pixiv.net/' \
          --header='sec-ch-ua: "Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"' \
          --header='sec-ch-ua-mobile: ?0' \
          --header='sec-ch-ua-platform: "Windows"' \
          --header='sec-fetch-dest: image' \
          --header='sec-fetch-mode: no-cors' \
          --header='sec-fetch-site: cross-site' \
          --header='sec-fetch-storage-access: none' \
          --header='user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36'
        rm -rf urllist.txt
    
    - name: Download UID Artworks
      if: inputs.mode == '下载特定UID的作品'
      run: |
        python aria.py -uid ${{ inputs.UID }} -c ${{ secrets.COOKIE }} -m subscribe
        cd image
        bash ../retry.sh aria2c -c --input-file=urllist.txt --continue=true --conditional-get=true --allow-overwrite=false --auto-file-renaming=false  \
          --header='accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8' \
          --header='accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,ja;q=0.6,eo;q=0.5' \
          --header='cache-control: no-cache' \
          --header='dnt: 1' \
          --header='pragma: no-cache' \
          --header='priority: i' \
          --header='referer: https://www.pixiv.net/' \
          --header='sec-ch-ua: "Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"' \
          --header='sec-ch-ua-mobile: ?0' \
          --header='sec-ch-ua-platform: "Windows"' \
          --header='sec-fetch-dest: image' \
          --header='sec-fetch-mode: no-cors' \
          --header='sec-fetch-site: cross-site' \
          --header='sec-fetch-storage-access: none' \
          --header='user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36'
        rm -rf urllist.txt

    - name: Gif find
      run: |
        python gif.py -c ${{ secrets.COOKIE }}
        eval $(cat GIF_CONTROL)
        echo "GIF_CONTROL=$GIF_CONTROL" >> $GITHUB_OUTPUT
      id: gif-check

    - name: GifZIP donwload
      if:  ${{ steps.gif-check.outputs.GIF_CONTROL == 'true' }}
      run: |
        cd image
        bash ../retry.sh aria2c -c --input-file=gifs.txt --continue=true --conditional-get=true --allow-overwrite=false --auto-file-renaming=false  \
          --header='accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8' \
          --header='accept-language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,ja;q=0.6,eo;q=0.5' \
          --header='cache-control: no-cache' \
          --header='dnt: 1' \
          --header='pragma: no-cache' \
          --header='priority: i' \
          --header='referer: https://www.pixiv.net/' \
          --header='sec-ch-ua: "Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"' \
          --header='sec-ch-ua-mobile: ?0' \
          --header='sec-ch-ua-platform: "Windows"' \
          --header='sec-fetch-dest: image' \
          --header='sec-fetch-mode: no-cors' \
          --header='sec-fetch-site: cross-site' \
          --header='sec-fetch-storage-access: none' \
          --header='user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36'
        rm -rf gifs.txt
        
    - name: Upload tmp Imgae
      if:  ${{ steps.gif-check.outputs.GIF_CONTROL == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mode == '下载特定收藏tag' && inputs.tag || inputs.UID }}
        path: image
        retention-days: 1

    - name: Upload
      if:  ${{ steps.gif-check.outputs.GIF_CONTROL == 'false' }}
      run: |
        sudo -v ; curl https://rclone.org/install.sh | sudo bash
        bash rclone.sh -p ${{ inputs.Upload }}

    - name: Clean
      run: |
        rm -rf image
        python C.py --public "${{ secrets.PUBLIC }}" --private "${{ secrets.PRIVATE }}" --mode jiami --type rclone

    - name: Push
      if:  ${{ steps.gif-check.outputs.GIF_CONTROL == 'false' && inputs.push == true }}
      run: |
        git init
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add rclone.conf
        git commit -m "Input update ${{ github.run_id }}"
        # git checkout -- Upload/oa.json
        git filter-branch --force --index-filter 'if [ "$GIT_COMMIT" != "$(git rev-parse HEAD)" ]; then git rm --cached --ignore-unmatch rclone.conf; fi' --prune-empty --tag-name-filter cat -- --all
        git push origin --force --all
  
  Pixiv-GIF:
    needs: Pixiv-Main
    if:  ${{ needs.Pixiv-Main.outputs.gif-check == 'true' }}
    uses: ./.github/workflows/Gif.yml
    with:
      upload-path: ${{ inputs.Upload }}
      artifact-path: ${{ inputs.mode == '下载特定收藏tag' && inputs.tag || inputs.UID }}
      push: ${{ inputs.push }}
    secrets: inherit
